// Zod schemas for the Kanji learning application
import { z } from 'zod';

// JLPT levels enum (ordered from easiest to hardest)
export const jlptLevelEnum = z.enum(['N5', 'N4', 'N3', 'N2', 'N1']);
export type JLPTLevel = z.infer<typeof jlptLevelEnum>;

// Kanji schema representing a single kanji entry
export const kanjiSchema = z.object({
  id: z.number(), // primary key
  character: z.string().min(1), // kanji character
  meaning: z.string().min(1), // English meaning
  onyomi: z.string().nullable(), // optional reading, can be null
  kunyomi: z.string().nullable(), // optional reading, can be null
  jlpt_level: jlptLevelEnum, // JLPT level
  created_at: z.coerce.date(), // timestamp when added
});

export type Kanji = z.infer<typeof kanjiSchema>;

// Input schema for creating a new kanji (id & created_at are generated by DB)
export const createKanjiInputSchema = z.object({
  character: z.string().min(1),
  meaning: z.string().min(1),
  onyomi: z.string().nullable().optional(), // can be omitted or null
  kunyomi: z.string().nullable().optional(),
  jlpt_level: jlptLevelEnum,
});

export type CreateKanjiInput = z.infer<typeof createKanjiInputSchema>;

// Input schema for updating a kanji (all fields optional except id)
export const updateKanjiInputSchema = z.object({
  id: z.number(),
  character: z.string().min(1).optional(),
  meaning: z.string().min(1).optional(),
  onyomi: z.string().nullable().optional(),
  kunyomi: z.string().nullable().optional(),
  jlpt_level: jlptLevelEnum.optional(),
});

export type UpdateKanjiInput = z.infer<typeof updateKanjiInputSchema>;

// Schema for user progress on a specific kanji (SRS data)
export const kanjiProgressSchema = z.object({
  id: z.number(), // primary key of progress record
  user_id: z.number(),
  kanji_id: z.number(),
  next_review: z.coerce.date(), // when the kanji should be reviewed next
  interval_days: z.number().int().positive(), // interval in days
  efactor: z.number().int().positive(), // easiness factor for SM-2 algorithm
  last_reviewed_at: z.coerce.date().nullable(), // when it was last reviewed
});

export type KanjiProgress = z.infer<typeof kanjiProgressSchema>;

// Input for recording a review result (simplified)
export const recordReviewInputSchema = z.object({
  user_id: z.number(),
  kanji_id: z.number(),
  quality: z.number().int().min(0).max(5), // SM-2 quality rating 0-5
});

export type RecordReviewInput = z.infer<typeof recordReviewInputSchema>;
