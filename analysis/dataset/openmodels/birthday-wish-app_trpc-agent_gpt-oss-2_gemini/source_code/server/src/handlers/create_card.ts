import { db } from '../db';
import { cards } from '../db/schema';
import { type CreateCardInput, type Card } from '../schema';
import { type NewCard } from '../db/schema';

/**
 * Creates a new birthday card in the database and returns the created record.
 * All fields are persisted, with `created_at` generated by the DB.
 */
export const createCard = async (input: CreateCardInput): Promise<Card> => {
  try {
    // Insert the new card; drizzle returns the inserted row(s) when using returning()
    const result = await db
      .insert(cards)
      .values({
        name: input.name,
        message: input.message,
        animation_type: input.animation_type,
      } as NewCard)
      .returning()
      .execute();

    // The result is an array with a single element
    const created = result[0];
    // Return the record as the Card type (created_at is already a Date object)
    return {
      id: created.id,
      name: created.name,
      message: created.message,
      animation_type: created.animation_type,
      created_at: created.created_at,
    };
  } catch (error) {
    console.error('Failed to create card:', error);
    throw error;
  }
};

/**
 * Retrieves all birthday cards from the database.
 */
export const getCards = async (): Promise<Card[]> => {
  try {
    const rows = await db.select().from(cards).execute();
    // rows already conform to the Card type defined in db/schema, but we map for clarity
    return rows.map((row) => ({
      id: row.id,
      name: row.name,
      message: row.message,
      animation_type: row.animation_type,
      created_at: row.created_at,
    }));
  } catch (error) {
    console.error('Failed to fetch cards:', error);
    throw error;
  }
};
