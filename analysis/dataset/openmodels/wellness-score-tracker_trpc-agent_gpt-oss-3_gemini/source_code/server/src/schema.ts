import { z } from 'zod';

// Wellness entry schema representing a record in the database
export const wellnessEntrySchema = z.object({
  id: z.number(),
  sleep_hours: z.number(), // Allows decimal values (e.g., 7.5)
  stress_level: z.number().int().min(1).max(5), // Scale 1-5
  caffeine_servings: z.number().int().nonnegative(),
  alcohol_servings: z.number().int().nonnegative(),
  wellness_score: z.number().min(0).max(100), // 0-100 score
  created_at: z.coerce.date(),
});

export type WellnessEntry = z.infer<typeof wellnessEntrySchema>;

// Input schema for creating a new wellness entry (id and created_at are generated by DB)
export const createWellnessEntryInputSchema = z.object({
  sleep_hours: z.number(),
  stress_level: z.number().int().min(1).max(5),
  caffeine_servings: z.number().int().nonnegative(),
  alcohol_servings: z.number().int().nonnegative(),
  // wellness_score can be calculated serverâ€‘side; allow optional input for flexibility
  wellness_score: z.number().min(0).max(100).optional(),
});

export type CreateWellnessEntryInput = z.infer<typeof createWellnessEntryInputSchema>;

// Input schema for updating an existing entry
export const updateWellnessEntryInputSchema = z.object({
  id: z.number(),
  sleep_hours: z.number().optional(),
  stress_level: z.number().int().min(1).max(5).optional(),
  caffeine_servings: z.number().int().nonnegative().optional(),
  alcohol_servings: z.number().int().nonnegative().optional(),
  wellness_score: z.number().min(0).max(100).optional(),
});

export type UpdateWellnessEntryInput = z.infer<typeof updateWellnessEntryInputSchema>;
