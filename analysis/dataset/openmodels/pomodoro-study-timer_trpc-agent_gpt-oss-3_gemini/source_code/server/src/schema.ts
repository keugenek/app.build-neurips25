import { z } from 'zod';

// ---------------------------------------------------------------------------
// Pomodoro Settings Schema
// ---------------------------------------------------------------------------
// Represents configurable intervals for a Pomodoro timer.
export const pomodoroSettingsSchema = z.object({
  id: z.number(), // primary key
  work_interval: z.number().int().min(1).max(90), // minutes, default 25
  break_interval: z.number().int().min(1).max(30), // minutes, default 5
});

export type PomodoroSettings = z.infer<typeof pomodoroSettingsSchema>;

// Input schema for creating settings (normally only one row exists)
export const createPomodoroSettingsInputSchema = z.object({
  work_interval: z.number().int().min(1).max(90).optional(), // optional -> use DB default if omitted
  break_interval: z.number().int().min(1).max(30).optional(),
});

export type CreatePomodoroSettingsInput = z.infer<typeof createPomodoroSettingsInputSchema>;

// Input schema for updating settings
export const updatePomodoroSettingsInputSchema = z.object({
  id: z.number(),
  work_interval: z.number().int().min(1).max(90).optional(),
  break_interval: z.number().int().min(1).max(30).optional(),
});

export type UpdatePomodoroSettingsInput = z.infer<typeof updatePomodoroSettingsInputSchema>;

// ---------------------------------------------------------------------------
// Pomodoro Session Log Schema
// ---------------------------------------------------------------------------
// Each completed Pomodoro session is recorded.
export const pomodoroLogSchema = z.object({
  id: z.number(),
  started_at: z.coerce.date(), // timestamp when the session started
  work_duration: z.number().int().positive(), // minutes of work interval
  break_duration: z.number().int().positive(), // minutes of break interval used for that session
});

export type PomodoroLog = z.infer<typeof pomodoroLogSchema>;

// Input schema for creating a log entry (started_at is autoâ€‘generated by DB)
export const createPomodoroLogInputSchema = z.object({
  work_duration: z.number().int().positive(),
  break_duration: z.number().int().positive(),
});

export type CreatePomodoroLogInput = z.infer<typeof createPomodoroLogInputSchema>;
